interface WhatsAppMessage {
  recipients: string;
  message: string;
  interval?: string;
}

interface WhatsAppResponse {
  success: boolean;
  message?: string;
  error?: string;
}

class WhatsAppService {
  private readonly apiUrl = import.meta.env.VITE_WHATSAPP_API_URL;
  private readonly authToken = import.meta.env.VITE_WHATSAPP_AUTH_TOKEN;

  constructor() {
    if (!this.apiUrl || !this.authToken) {
      console.warn('WhatsApp API URL ou Auth Token n√£o configurados. Mensagens WhatsApp n√£o ser√£o enviadas.');
    }
  }

  /**
   * Formata um n√∫mero de telefone do formato (XX) XXXXX-XXXX para 55XXXXXXXXXXX
   * @param phoneNumber - N√∫mero no formato (XX) XXXXX-XXXX
   * @returns N√∫mero formatado como 55XXXXXXXXXXX
   */
  private formatPhoneNumber(phoneNumber: string): string {
    // Remove todos os caracteres especiais e espa√ßos
    const cleanNumber = phoneNumber.replace(/[^\d]/g, '');
    
    // Adiciona o c√≥digo do pa√≠s (55) se n√£o estiver presente
    if (!cleanNumber.startsWith('55')) {
      return '55' + cleanNumber;
    }
    
    return cleanNumber;
  }

  /**
   * Formata uma lista de n√∫meros de telefone
   * @param phoneNumbers - Array de n√∫meros no formato (XX) XXXXX-XXXX
   * @returns String com n√∫meros formatados separados por v√≠rgula
   */
  private formatPhoneNumbers(phoneNumbers: string[]): string {
    return phoneNumbers
      .map(phone => this.formatPhoneNumber(phone))
      .join(', ');
  }

  /**
   * Envia mensagem WhatsApp para um √∫nico destinat√°rio
   * @param phoneNumber - N√∫mero no formato (XX) XXXXX-XXXX
   * @param message - Mensagem a ser enviada
   * @returns Promise com resultado do envio
   */
  async sendSingleMessage(phoneNumber: string, message: string): Promise<WhatsAppResponse> {
    if (!this.apiUrl || !this.authToken) {
      return {
        success: false,
        error: 'WhatsApp API n√£o configurada'
      };
    }

    try {
      const formattedNumber = this.formatPhoneNumber(phoneNumber);
      
      const payload: WhatsAppMessage = {
        recipients: formattedNumber,
        message,
        interval: "1"
      };

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Authorization': this.authToken,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      return {
        success: true,
        message: 'Mensagem enviada com sucesso'
      };
    } catch (error) {
      console.error('Erro ao enviar mensagem WhatsApp:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Envia mensagem WhatsApp para m√∫ltiplos destinat√°rios
   * @param phoneNumbers - Array de n√∫meros no formato (XX) XXXXX-XXXX
   * @param message - Mensagem a ser enviada
   * @returns Promise com resultado do envio
   */
  async sendMultipleMessages(phoneNumbers: string[], message: string): Promise<WhatsAppResponse> {
    if (!this.apiUrl || !this.authToken) {
      return {
        success: false,
        error: 'WhatsApp API n√£o configurada'
      };
    }

    try {
      if (phoneNumbers.length === 0) {
        return {
          success: false,
          error: 'Nenhum n√∫mero de telefone fornecido'
        };
      }

      const formattedNumbers = this.formatPhoneNumbers(phoneNumbers);
      
      const payload: WhatsAppMessage = {
        recipients: formattedNumbers,
        message,
        interval: "1"
      };

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Authorization': this.authToken,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      return {
        success: true,
        message: `Mensagem enviada para ${phoneNumbers.length} destinat√°rio(s)`
      };
    } catch (error) {
      console.error('Erro ao enviar mensagens WhatsApp:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Envia notifica√ß√£o quando usu√°rio √© adicionado a uma tarefa
   * @param phoneNumber - N√∫mero do usu√°rio adicionado
   * @param taskTitle - T√≠tulo da tarefa
   * @param boardId - ID do board para gerar link
   * @returns Promise com resultado do envio
   */
  async notifyUserAddedToTask(phoneNumber: string, taskTitle: string, boardId: string): Promise<WhatsAppResponse> {
    const boardLink = `${window.location.origin}/board/${boardId}`;
    const message = `üéØ Voc√™ foi adicionado √† tarefa: "${taskTitle}"\n\nAcesse o board: ${boardLink}`;
    
    return this.sendSingleMessage(phoneNumber, message);
  }

  /**
   * Envia notifica√ß√£o quando uma tarefa √© exclu√≠da
   * @param phoneNumbers - N√∫meros dos membros da tarefa
   * @param taskTitle - T√≠tulo da tarefa exclu√≠da
   * @returns Promise com resultado do envio
   */
  async notifyTaskDeleted(phoneNumbers: string[], taskTitle: string): Promise<WhatsAppResponse> {
    const message = `üóëÔ∏è A tarefa "${taskTitle}" foi exclu√≠da.`;
    
    return this.sendMultipleMessages(phoneNumbers, message);
  }

  /**
   * Envia notifica√ß√£o quando uma tarefa muda de coluna
   * @param phoneNumbers - N√∫meros dos membros da tarefa
   * @param taskTitle - T√≠tulo da tarefa
   * @param fromColumn - Nome da coluna de origem
   * @param toColumn - Nome da coluna de destino
   * @returns Promise com resultado do envio
   */
  async notifyTaskMoved(phoneNumbers: string[], taskTitle: string, fromColumn: string, toColumn: string): Promise<WhatsAppResponse> {
    const message = `üìã A tarefa "${taskTitle}" foi movida de "${fromColumn}" para "${toColumn}".`;
    
    return this.sendMultipleMessages(phoneNumbers, message);
  }

  /**
   * Envia notifica√ß√£o quando uma coluna √© exclu√≠da
   * @param phoneNumber - N√∫mero do respons√°vel pela tarefa
   * @param userName - Nome do respons√°vel
   * @param columnTitle - T√≠tulo da coluna exclu√≠da
   * @param taskTitle - T√≠tulo da tarefa que estava na coluna
   * @returns Promise com resultado do envio
   */
  async notifyColumnDeleted(phoneNumber: string, userName: string, columnTitle: string, taskTitle: string): Promise<WhatsAppResponse> {
    const message = `üìÇ Ol√° ${userName}! A coluna "${columnTitle}" foi exclu√≠da e sua tarefa "${taskTitle}" foi removida junto.`;
    
    return this.sendSingleMessage(phoneNumber, message);
  }

  /**
   * Envia notifica√ß√£o quando um board √© exclu√≠do
   * @param phoneNumber - N√∫mero do respons√°vel pela tarefa
   * @param userName - Nome do respons√°vel
   * @param boardTitle - T√≠tulo do board exclu√≠do
   * @param taskTitle - T√≠tulo da tarefa que estava no board
   * @returns Promise com resultado do envio
   */
  async notifyBoardDeleted(phoneNumber: string, userName: string, boardTitle: string, taskTitle: string): Promise<WhatsAppResponse> {
    const message = `üìã Ol√° ${userName}! O board "${boardTitle}" foi exclu√≠do e sua tarefa "${taskTitle}" foi removida junto.`;
    
    return this.sendSingleMessage(phoneNumber, message);
  }

  /**
   * Envia notifica√ß√£o quando uma coluna ou board √© exclu√≠do
   * @param phoneNumbers - N√∫meros dos usu√°rios afetados
   * @param itemTitle - T√≠tulo da coluna ou board exclu√≠do
   * @param itemType - Tipo do item ('coluna' ou 'board')
   * @returns Promise com resultado do envio
   */
  async notifyItemDeleted(phoneNumbers: string[], itemTitle: string, itemType: 'coluna' | 'board'): Promise<WhatsAppResponse> {
    const emoji = itemType === 'coluna' ? 'üìÇ' : 'üìã';
    const message = `${emoji} ${itemType === 'coluna' ? 'A coluna' : 'O board'} "${itemTitle}" foi ${itemType === 'coluna' ? 'exclu√≠da' : 'exclu√≠do'}.`;
    
    return this.sendMultipleMessages(phoneNumbers, message);
  }
}

// Exporta uma inst√¢ncia singleton do servi√ßo
export const whatsappService = new WhatsAppService();
export default whatsappService;